"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _media = require("../../../actions/media");

var _reactRouterDom = require("react-router-dom");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _collectionViews = require("../../../constants/collectionViews");

var _formatters = require("../../../lib/formatters");

var _core = require("@emotion/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const ListCard = (0, _styledBase.default)("li", {
  target: "eab48an0",
  label: "ListCard"
})(_netlifyCmsUiDefault.components.card, ";width:", _netlifyCmsUiDefault.lengths.topCardWidth, ";margin-left:12px;margin-bottom:16px;overflow:hidden;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vRW50cmllcy9FbnRyeUNhcmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUzBCIiwiZmlsZSI6Ii4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vRW50cmllcy9FbnRyeUNhcmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGdldEFzc2V0IH0gZnJvbSAnQWN0aW9ucy9tZWRpYSc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBjb2xvcnMsIGNvbG9yc1JhdywgY29tcG9uZW50cywgbGVuZ3RocywgQXNzZXQgfSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCB7IFZJRVdfU1RZTEVfTElTVCwgVklFV19TVFlMRV9HUklEIH0gZnJvbSAnQ29uc3RhbnRzL2NvbGxlY3Rpb25WaWV3cyc7XG5pbXBvcnQgeyBzdW1tYXJ5Rm9ybWF0dGVyIH0gZnJvbSAnTGliL2Zvcm1hdHRlcnMnO1xuXG5jb25zdCBMaXN0Q2FyZCA9IHN0eWxlZC5saWBcbiAgJHtjb21wb25lbnRzLmNhcmR9O1xuICB3aWR0aDogJHtsZW5ndGhzLnRvcENhcmRXaWR0aH07XG4gIG1hcmdpbi1sZWZ0OiAxMnB4O1xuICBtYXJnaW4tYm90dG9tOiAxNnB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuYDtcblxuY29uc3QgTGlzdENhcmRMaW5rID0gc3R5bGVkKExpbmspYFxuICBkaXNwbGF5OiBibG9jaztcbiAgbWF4LXdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiAxNnB4IDIycHg7XG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmZvcmVncm91bmR9O1xuICB9XG5gO1xuXG5jb25zdCBHcmlkQ2FyZCA9IHN0eWxlZC5saWBcbiAgJHtjb21wb25lbnRzLmNhcmR9O1xuICBmbGV4OiAwIDAgMzM1cHg7XG4gIGhlaWdodDogMjQwcHg7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIG1hcmdpbi1sZWZ0OiAxMnB4O1xuICBtYXJnaW4tYm90dG9tOiAxNnB4O1xuYDtcblxuY29uc3QgR3JpZENhcmRMaW5rID0gc3R5bGVkKExpbmspYFxuICBkaXNwbGF5OiBibG9jaztcbiAgJixcbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZm9yZWdyb3VuZH07XG4gICAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuICB9XG5gO1xuXG5jb25zdCBDb2xsZWN0aW9uTGFiZWwgPSBzdHlsZWQuaDJgXG4gIGZvbnQtc2l6ZTogMTJweDtcbiAgY29sb3I6ICR7Y29sb3JzLnRleHRMZWFkfTtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbmA7XG5cbmNvbnN0IExpc3RDYXJkVGl0bGUgPSBzdHlsZWQuaDJgXG4gIG1hcmdpbi1ib3R0b206IDA7XG5gO1xuXG5jb25zdCBDYXJkSGVhZGluZyA9IHN0eWxlZC5oMmBcbiAgbWFyZ2luOiAwIDAgMnB4O1xuYDtcblxuY29uc3QgQ2FyZEJvZHkgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAxNnB4IDIycHg7XG4gIGhlaWdodDogOTBweDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBtYXJnaW4tYm90dG9tOiAke3Byb3BzID0+IHByb3BzLmhhc0ltYWdlICYmIDB9O1xuXG4gICY6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICB6LWluZGV4OiAxO1xuICAgIGJvdHRvbTogMDtcbiAgICBsZWZ0OiAtMjAlO1xuICAgIGhlaWdodDogMTQwJTtcbiAgICB3aWR0aDogMTQwJTtcbiAgICBib3gtc2hhZG93OiBpbnNldCAwIC0xNXB4IDI0cHggJHtjb2xvcnNSYXcud2hpdGV9O1xuICB9XG5gO1xuXG5jb25zdCBDYXJkSW1hZ2UgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHtwcm9wcyA9PiBwcm9wcy52YWx1ZT8udG9TdHJpbmcoKX0pO1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXIgY2VudGVyO1xuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICBoZWlnaHQ6IDE1MHB4O1xuYDtcblxuY29uc3QgQ2FyZEltYWdlQXNzZXQgPSAoeyBnZXRBc3NldCwgaW1hZ2UgfSkgPT4ge1xuICByZXR1cm4gPEFzc2V0IHBhdGg9e2ltYWdlfSBnZXRBc3NldD17Z2V0QXNzZXR9IGNvbXBvbmVudD17Q2FyZEltYWdlfSAvPjtcbn07XG5cbmNvbnN0IEVudHJ5Q2FyZCA9ICh7XG4gIHBhdGgsXG4gIHN1bW1hcnksXG4gIGltYWdlLFxuICBjb2xsZWN0aW9uTGFiZWwsXG4gIHZpZXdTdHlsZSA9IFZJRVdfU1RZTEVfTElTVCxcbiAgYm91bmRHZXRBc3NldCxcbn0pID0+IHtcbiAgaWYgKHZpZXdTdHlsZSA9PT0gVklFV19TVFlMRV9MSVNUKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxMaXN0Q2FyZD5cbiAgICAgICAgPExpc3RDYXJkTGluayB0bz17cGF0aH0+XG4gICAgICAgICAge2NvbGxlY3Rpb25MYWJlbCA/IDxDb2xsZWN0aW9uTGFiZWw+e2NvbGxlY3Rpb25MYWJlbH08L0NvbGxlY3Rpb25MYWJlbD4gOiBudWxsfVxuICAgICAgICAgIDxMaXN0Q2FyZFRpdGxlPntzdW1tYXJ5fTwvTGlzdENhcmRUaXRsZT5cbiAgICAgICAgPC9MaXN0Q2FyZExpbms+XG4gICAgICA8L0xpc3RDYXJkPlxuICAgICk7XG4gIH1cblxuICBpZiAodmlld1N0eWxlID09PSBWSUVXX1NUWUxFX0dSSUQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEdyaWRDYXJkPlxuICAgICAgICA8R3JpZENhcmRMaW5rIHRvPXtwYXRofT5cbiAgICAgICAgICA8Q2FyZEJvZHkgaGFzSW1hZ2U9e2ltYWdlfT5cbiAgICAgICAgICAgIHtjb2xsZWN0aW9uTGFiZWwgPyA8Q29sbGVjdGlvbkxhYmVsPntjb2xsZWN0aW9uTGFiZWx9PC9Db2xsZWN0aW9uTGFiZWw+IDogbnVsbH1cbiAgICAgICAgICAgIDxDYXJkSGVhZGluZz57c3VtbWFyeX08L0NhcmRIZWFkaW5nPlxuICAgICAgICAgIDwvQ2FyZEJvZHk+XG4gICAgICAgICAge2ltYWdlID8gPENhcmRJbWFnZUFzc2V0IGdldEFzc2V0PXtib3VuZEdldEFzc2V0fSBpbWFnZT17aW1hZ2V9IC8+IDogbnVsbH1cbiAgICAgICAgPC9HcmlkQ2FyZExpbms+XG4gICAgICA8L0dyaWRDYXJkPlxuICAgICk7XG4gIH1cbn07XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSwgb3duUHJvcHMpID0+IHtcbiAgY29uc3QgeyBlbnRyeSwgaW5mZXJlZEZpZWxkcywgY29sbGVjdGlvbiB9ID0gb3duUHJvcHM7XG4gIGNvbnN0IGxhYmVsID0gZW50cnkuZ2V0KCdsYWJlbCcpO1xuICBjb25zdCBlbnRyeURhdGEgPSBlbnRyeS5nZXQoJ2RhdGEnKTtcbiAgY29uc3QgZGVmYXVsdFRpdGxlID0gbGFiZWwgfHwgZW50cnlEYXRhLmdldChpbmZlcmVkRmllbGRzLnRpdGxlRmllbGQpO1xuICBjb25zdCBzdW1tYXJ5VGVtcGxhdGUgPSBjb2xsZWN0aW9uLmdldCgnc3VtbWFyeScpO1xuICBjb25zdCBzdW1tYXJ5ID0gc3VtbWFyeVRlbXBsYXRlXG4gICAgPyBzdW1tYXJ5Rm9ybWF0dGVyKHN1bW1hcnlUZW1wbGF0ZSwgZW50cnksIGNvbGxlY3Rpb24pXG4gICAgOiBkZWZhdWx0VGl0bGU7XG5cbiAgbGV0IGltYWdlID0gZW50cnlEYXRhLmdldChpbmZlcmVkRmllbGRzLmltYWdlRmllbGQpO1xuICBpZiAoaW1hZ2UpIHtcbiAgICBpbWFnZSA9IGVuY29kZVVSSShpbWFnZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHN1bW1hcnksXG4gICAgcGF0aDogYC9jb2xsZWN0aW9ucy8ke2NvbGxlY3Rpb24uZ2V0KCduYW1lJyl9L2VudHJpZXMvJHtlbnRyeS5nZXQoJ3NsdWcnKX1gLFxuICAgIGltYWdlLFxuICB9O1xufTtcblxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0ge1xuICBib3VuZEdldEFzc2V0OiAoY29sbGVjdGlvbiwgZW50cnkpID0+IChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHBhdGggPT4ge1xuICAgIHJldHVybiBnZXRBc3NldCh7IGNvbGxlY3Rpb24sIGVudHJ5LCBwYXRoIH0pKGRpc3BhdGNoLCBnZXRTdGF0ZSk7XG4gIH0sXG59O1xuXG5jb25zdCBtZXJnZVByb3BzID0gKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSA9PiB7XG4gIHJldHVybiB7XG4gICAgLi4uc3RhdGVQcm9wcyxcbiAgICAuLi5kaXNwYXRjaFByb3BzLFxuICAgIC4uLm93blByb3BzLFxuICAgIGJvdW5kR2V0QXNzZXQ6IGRpc3BhdGNoUHJvcHMuYm91bmRHZXRBc3NldChvd25Qcm9wcy5jb2xsZWN0aW9uLCBvd25Qcm9wcy5lbnRyeSksXG4gIH07XG59O1xuXG5jb25zdCBDb25uZWN0ZWRFbnRyeUNhcmQgPSBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzKShFbnRyeUNhcmQpO1xuXG5leHBvcnQgZGVmYXVsdCBDb25uZWN0ZWRFbnRyeUNhcmQ7XG4iXX0= */"));
const ListCardLink = (
/*#__PURE__*/
0, _styledBase.default)(_reactRouterDom.Link, {
  target: "eab48an1",
  label: "ListCardLink"
})("display:block;max-width:100%;padding:16px 22px;&:hover{background-color:", _netlifyCmsUiDefault.colors.foreground, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vRW50cmllcy9FbnRyeUNhcmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJpQyIsImZpbGUiOiIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Db2xsZWN0aW9uL0VudHJpZXMvRW50cnlDYXJkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBnZXRBc3NldCB9IGZyb20gJ0FjdGlvbnMvbWVkaWEnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgY29sb3JzLCBjb2xvcnNSYXcsIGNvbXBvbmVudHMsIGxlbmd0aHMsIEFzc2V0IH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBWSUVXX1NUWUxFX0xJU1QsIFZJRVdfU1RZTEVfR1JJRCB9IGZyb20gJ0NvbnN0YW50cy9jb2xsZWN0aW9uVmlld3MnO1xuaW1wb3J0IHsgc3VtbWFyeUZvcm1hdHRlciB9IGZyb20gJ0xpYi9mb3JtYXR0ZXJzJztcblxuY29uc3QgTGlzdENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6ICR7bGVuZ3Rocy50b3BDYXJkV2lkdGh9O1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbmA7XG5cbmNvbnN0IExpc3RDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMTZweCAyMnB4O1xuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5mb3JlZ3JvdW5kfTtcbiAgfVxuYDtcblxuY29uc3QgR3JpZENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgZmxleDogMCAwIDMzNXB4O1xuICBoZWlnaHQ6IDI0MHB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbmA7XG5cbmNvbnN0IEdyaWRDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gICYsXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmZvcmVncm91bmR9O1xuICAgIGNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbiAgfVxuYDtcblxuY29uc3QgQ29sbGVjdGlvbkxhYmVsID0gc3R5bGVkLmgyYFxuICBmb250LXNpemU6IDEycHg7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5gO1xuXG5jb25zdCBMaXN0Q2FyZFRpdGxlID0gc3R5bGVkLmgyYFxuICBtYXJnaW4tYm90dG9tOiAwO1xuYDtcblxuY29uc3QgQ2FyZEhlYWRpbmcgPSBzdHlsZWQuaDJgXG4gIG1hcmdpbjogMCAwIDJweDtcbmA7XG5cbmNvbnN0IENhcmRCb2R5ID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZzogMTZweCAyMnB4O1xuICBoZWlnaHQ6IDkwcHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWFyZ2luLWJvdHRvbTogJHtwcm9wcyA9PiBwcm9wcy5oYXNJbWFnZSAmJiAwfTtcblxuICAmOmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgei1pbmRleDogMTtcbiAgICBib3R0b206IDA7XG4gICAgbGVmdDogLTIwJTtcbiAgICBoZWlnaHQ6IDE0MCU7XG4gICAgd2lkdGg6IDE0MCU7XG4gICAgYm94LXNoYWRvdzogaW5zZXQgMCAtMTVweCAyNHB4ICR7Y29sb3JzUmF3LndoaXRlfTtcbiAgfVxuYDtcblxuY29uc3QgQ2FyZEltYWdlID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7cHJvcHMgPT4gcHJvcHMudmFsdWU/LnRvU3RyaW5nKCl9KTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgaGVpZ2h0OiAxNTBweDtcbmA7XG5cbmNvbnN0IENhcmRJbWFnZUFzc2V0ID0gKHsgZ2V0QXNzZXQsIGltYWdlIH0pID0+IHtcbiAgcmV0dXJuIDxBc3NldCBwYXRoPXtpbWFnZX0gZ2V0QXNzZXQ9e2dldEFzc2V0fSBjb21wb25lbnQ9e0NhcmRJbWFnZX0gLz47XG59O1xuXG5jb25zdCBFbnRyeUNhcmQgPSAoe1xuICBwYXRoLFxuICBzdW1tYXJ5LFxuICBpbWFnZSxcbiAgY29sbGVjdGlvbkxhYmVsLFxuICB2aWV3U3R5bGUgPSBWSUVXX1NUWUxFX0xJU1QsXG4gIGJvdW5kR2V0QXNzZXQsXG59KSA9PiB7XG4gIGlmICh2aWV3U3R5bGUgPT09IFZJRVdfU1RZTEVfTElTVCkge1xuICAgIHJldHVybiAoXG4gICAgICA8TGlzdENhcmQ+XG4gICAgICAgIDxMaXN0Q2FyZExpbmsgdG89e3BhdGh9PlxuICAgICAgICAgIHtjb2xsZWN0aW9uTGFiZWwgPyA8Q29sbGVjdGlvbkxhYmVsPntjb2xsZWN0aW9uTGFiZWx9PC9Db2xsZWN0aW9uTGFiZWw+IDogbnVsbH1cbiAgICAgICAgICA8TGlzdENhcmRUaXRsZT57c3VtbWFyeX08L0xpc3RDYXJkVGl0bGU+XG4gICAgICAgIDwvTGlzdENhcmRMaW5rPlxuICAgICAgPC9MaXN0Q2FyZD5cbiAgICApO1xuICB9XG5cbiAgaWYgKHZpZXdTdHlsZSA9PT0gVklFV19TVFlMRV9HUklEKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxHcmlkQ2FyZD5cbiAgICAgICAgPEdyaWRDYXJkTGluayB0bz17cGF0aH0+XG4gICAgICAgICAgPENhcmRCb2R5IGhhc0ltYWdlPXtpbWFnZX0+XG4gICAgICAgICAgICB7Y29sbGVjdGlvbkxhYmVsID8gPENvbGxlY3Rpb25MYWJlbD57Y29sbGVjdGlvbkxhYmVsfTwvQ29sbGVjdGlvbkxhYmVsPiA6IG51bGx9XG4gICAgICAgICAgICA8Q2FyZEhlYWRpbmc+e3N1bW1hcnl9PC9DYXJkSGVhZGluZz5cbiAgICAgICAgICA8L0NhcmRCb2R5PlxuICAgICAgICAgIHtpbWFnZSA/IDxDYXJkSW1hZ2VBc3NldCBnZXRBc3NldD17Ym91bmRHZXRBc3NldH0gaW1hZ2U9e2ltYWdlfSAvPiA6IG51bGx9XG4gICAgICAgIDwvR3JpZENhcmRMaW5rPlxuICAgICAgPC9HcmlkQ2FyZD5cbiAgICApO1xuICB9XG59O1xuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUsIG93blByb3BzKSA9PiB7XG4gIGNvbnN0IHsgZW50cnksIGluZmVyZWRGaWVsZHMsIGNvbGxlY3Rpb24gfSA9IG93blByb3BzO1xuICBjb25zdCBsYWJlbCA9IGVudHJ5LmdldCgnbGFiZWwnKTtcbiAgY29uc3QgZW50cnlEYXRhID0gZW50cnkuZ2V0KCdkYXRhJyk7XG4gIGNvbnN0IGRlZmF1bHRUaXRsZSA9IGxhYmVsIHx8IGVudHJ5RGF0YS5nZXQoaW5mZXJlZEZpZWxkcy50aXRsZUZpZWxkKTtcbiAgY29uc3Qgc3VtbWFyeVRlbXBsYXRlID0gY29sbGVjdGlvbi5nZXQoJ3N1bW1hcnknKTtcbiAgY29uc3Qgc3VtbWFyeSA9IHN1bW1hcnlUZW1wbGF0ZVxuICAgID8gc3VtbWFyeUZvcm1hdHRlcihzdW1tYXJ5VGVtcGxhdGUsIGVudHJ5LCBjb2xsZWN0aW9uKVxuICAgIDogZGVmYXVsdFRpdGxlO1xuXG4gIGxldCBpbWFnZSA9IGVudHJ5RGF0YS5nZXQoaW5mZXJlZEZpZWxkcy5pbWFnZUZpZWxkKTtcbiAgaWYgKGltYWdlKSB7XG4gICAgaW1hZ2UgPSBlbmNvZGVVUkkoaW1hZ2UpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzdW1tYXJ5LFxuICAgIHBhdGg6IGAvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uLmdldCgnbmFtZScpfS9lbnRyaWVzLyR7ZW50cnkuZ2V0KCdzbHVnJyl9YCxcbiAgICBpbWFnZSxcbiAgfTtcbn07XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IHtcbiAgYm91bmRHZXRBc3NldDogKGNvbGxlY3Rpb24sIGVudHJ5KSA9PiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiBwYXRoID0+IHtcbiAgICByZXR1cm4gZ2V0QXNzZXQoeyBjb2xsZWN0aW9uLCBlbnRyeSwgcGF0aCB9KShkaXNwYXRjaCwgZ2V0U3RhdGUpO1xuICB9LFxufTtcblxuY29uc3QgbWVyZ2VQcm9wcyA9IChzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykgPT4ge1xuICByZXR1cm4ge1xuICAgIC4uLnN0YXRlUHJvcHMsXG4gICAgLi4uZGlzcGF0Y2hQcm9wcyxcbiAgICAuLi5vd25Qcm9wcyxcbiAgICBib3VuZEdldEFzc2V0OiBkaXNwYXRjaFByb3BzLmJvdW5kR2V0QXNzZXQob3duUHJvcHMuY29sbGVjdGlvbiwgb3duUHJvcHMuZW50cnkpLFxuICB9O1xufTtcblxuY29uc3QgQ29ubmVjdGVkRW50cnlDYXJkID0gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcykoRW50cnlDYXJkKTtcblxuZXhwb3J0IGRlZmF1bHQgQ29ubmVjdGVkRW50cnlDYXJkO1xuIl19 */"));
const GridCard = (0, _styledBase.default)("li", {
  target: "eab48an2",
  label: "GridCard"
})(_netlifyCmsUiDefault.components.card, ";flex:0 0 335px;height:240px;overflow:hidden;margin-left:12px;margin-bottom:16px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vRW50cmllcy9FbnRyeUNhcmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMEIwQiIsImZpbGUiOiIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Db2xsZWN0aW9uL0VudHJpZXMvRW50cnlDYXJkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBnZXRBc3NldCB9IGZyb20gJ0FjdGlvbnMvbWVkaWEnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgY29sb3JzLCBjb2xvcnNSYXcsIGNvbXBvbmVudHMsIGxlbmd0aHMsIEFzc2V0IH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBWSUVXX1NUWUxFX0xJU1QsIFZJRVdfU1RZTEVfR1JJRCB9IGZyb20gJ0NvbnN0YW50cy9jb2xsZWN0aW9uVmlld3MnO1xuaW1wb3J0IHsgc3VtbWFyeUZvcm1hdHRlciB9IGZyb20gJ0xpYi9mb3JtYXR0ZXJzJztcblxuY29uc3QgTGlzdENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6ICR7bGVuZ3Rocy50b3BDYXJkV2lkdGh9O1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbmA7XG5cbmNvbnN0IExpc3RDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMTZweCAyMnB4O1xuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5mb3JlZ3JvdW5kfTtcbiAgfVxuYDtcblxuY29uc3QgR3JpZENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgZmxleDogMCAwIDMzNXB4O1xuICBoZWlnaHQ6IDI0MHB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbmA7XG5cbmNvbnN0IEdyaWRDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gICYsXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmZvcmVncm91bmR9O1xuICAgIGNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbiAgfVxuYDtcblxuY29uc3QgQ29sbGVjdGlvbkxhYmVsID0gc3R5bGVkLmgyYFxuICBmb250LXNpemU6IDEycHg7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5gO1xuXG5jb25zdCBMaXN0Q2FyZFRpdGxlID0gc3R5bGVkLmgyYFxuICBtYXJnaW4tYm90dG9tOiAwO1xuYDtcblxuY29uc3QgQ2FyZEhlYWRpbmcgPSBzdHlsZWQuaDJgXG4gIG1hcmdpbjogMCAwIDJweDtcbmA7XG5cbmNvbnN0IENhcmRCb2R5ID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZzogMTZweCAyMnB4O1xuICBoZWlnaHQ6IDkwcHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWFyZ2luLWJvdHRvbTogJHtwcm9wcyA9PiBwcm9wcy5oYXNJbWFnZSAmJiAwfTtcblxuICAmOmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgei1pbmRleDogMTtcbiAgICBib3R0b206IDA7XG4gICAgbGVmdDogLTIwJTtcbiAgICBoZWlnaHQ6IDE0MCU7XG4gICAgd2lkdGg6IDE0MCU7XG4gICAgYm94LXNoYWRvdzogaW5zZXQgMCAtMTVweCAyNHB4ICR7Y29sb3JzUmF3LndoaXRlfTtcbiAgfVxuYDtcblxuY29uc3QgQ2FyZEltYWdlID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7cHJvcHMgPT4gcHJvcHMudmFsdWU/LnRvU3RyaW5nKCl9KTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgaGVpZ2h0OiAxNTBweDtcbmA7XG5cbmNvbnN0IENhcmRJbWFnZUFzc2V0ID0gKHsgZ2V0QXNzZXQsIGltYWdlIH0pID0+IHtcbiAgcmV0dXJuIDxBc3NldCBwYXRoPXtpbWFnZX0gZ2V0QXNzZXQ9e2dldEFzc2V0fSBjb21wb25lbnQ9e0NhcmRJbWFnZX0gLz47XG59O1xuXG5jb25zdCBFbnRyeUNhcmQgPSAoe1xuICBwYXRoLFxuICBzdW1tYXJ5LFxuICBpbWFnZSxcbiAgY29sbGVjdGlvbkxhYmVsLFxuICB2aWV3U3R5bGUgPSBWSUVXX1NUWUxFX0xJU1QsXG4gIGJvdW5kR2V0QXNzZXQsXG59KSA9PiB7XG4gIGlmICh2aWV3U3R5bGUgPT09IFZJRVdfU1RZTEVfTElTVCkge1xuICAgIHJldHVybiAoXG4gICAgICA8TGlzdENhcmQ+XG4gICAgICAgIDxMaXN0Q2FyZExpbmsgdG89e3BhdGh9PlxuICAgICAgICAgIHtjb2xsZWN0aW9uTGFiZWwgPyA8Q29sbGVjdGlvbkxhYmVsPntjb2xsZWN0aW9uTGFiZWx9PC9Db2xsZWN0aW9uTGFiZWw+IDogbnVsbH1cbiAgICAgICAgICA8TGlzdENhcmRUaXRsZT57c3VtbWFyeX08L0xpc3RDYXJkVGl0bGU+XG4gICAgICAgIDwvTGlzdENhcmRMaW5rPlxuICAgICAgPC9MaXN0Q2FyZD5cbiAgICApO1xuICB9XG5cbiAgaWYgKHZpZXdTdHlsZSA9PT0gVklFV19TVFlMRV9HUklEKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxHcmlkQ2FyZD5cbiAgICAgICAgPEdyaWRDYXJkTGluayB0bz17cGF0aH0+XG4gICAgICAgICAgPENhcmRCb2R5IGhhc0ltYWdlPXtpbWFnZX0+XG4gICAgICAgICAgICB7Y29sbGVjdGlvbkxhYmVsID8gPENvbGxlY3Rpb25MYWJlbD57Y29sbGVjdGlvbkxhYmVsfTwvQ29sbGVjdGlvbkxhYmVsPiA6IG51bGx9XG4gICAgICAgICAgICA8Q2FyZEhlYWRpbmc+e3N1bW1hcnl9PC9DYXJkSGVhZGluZz5cbiAgICAgICAgICA8L0NhcmRCb2R5PlxuICAgICAgICAgIHtpbWFnZSA/IDxDYXJkSW1hZ2VBc3NldCBnZXRBc3NldD17Ym91bmRHZXRBc3NldH0gaW1hZ2U9e2ltYWdlfSAvPiA6IG51bGx9XG4gICAgICAgIDwvR3JpZENhcmRMaW5rPlxuICAgICAgPC9HcmlkQ2FyZD5cbiAgICApO1xuICB9XG59O1xuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUsIG93blByb3BzKSA9PiB7XG4gIGNvbnN0IHsgZW50cnksIGluZmVyZWRGaWVsZHMsIGNvbGxlY3Rpb24gfSA9IG93blByb3BzO1xuICBjb25zdCBsYWJlbCA9IGVudHJ5LmdldCgnbGFiZWwnKTtcbiAgY29uc3QgZW50cnlEYXRhID0gZW50cnkuZ2V0KCdkYXRhJyk7XG4gIGNvbnN0IGRlZmF1bHRUaXRsZSA9IGxhYmVsIHx8IGVudHJ5RGF0YS5nZXQoaW5mZXJlZEZpZWxkcy50aXRsZUZpZWxkKTtcbiAgY29uc3Qgc3VtbWFyeVRlbXBsYXRlID0gY29sbGVjdGlvbi5nZXQoJ3N1bW1hcnknKTtcbiAgY29uc3Qgc3VtbWFyeSA9IHN1bW1hcnlUZW1wbGF0ZVxuICAgID8gc3VtbWFyeUZvcm1hdHRlcihzdW1tYXJ5VGVtcGxhdGUsIGVudHJ5LCBjb2xsZWN0aW9uKVxuICAgIDogZGVmYXVsdFRpdGxlO1xuXG4gIGxldCBpbWFnZSA9IGVudHJ5RGF0YS5nZXQoaW5mZXJlZEZpZWxkcy5pbWFnZUZpZWxkKTtcbiAgaWYgKGltYWdlKSB7XG4gICAgaW1hZ2UgPSBlbmNvZGVVUkkoaW1hZ2UpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzdW1tYXJ5LFxuICAgIHBhdGg6IGAvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uLmdldCgnbmFtZScpfS9lbnRyaWVzLyR7ZW50cnkuZ2V0KCdzbHVnJyl9YCxcbiAgICBpbWFnZSxcbiAgfTtcbn07XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IHtcbiAgYm91bmRHZXRBc3NldDogKGNvbGxlY3Rpb24sIGVudHJ5KSA9PiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiBwYXRoID0+IHtcbiAgICByZXR1cm4gZ2V0QXNzZXQoeyBjb2xsZWN0aW9uLCBlbnRyeSwgcGF0aCB9KShkaXNwYXRjaCwgZ2V0U3RhdGUpO1xuICB9LFxufTtcblxuY29uc3QgbWVyZ2VQcm9wcyA9IChzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykgPT4ge1xuICByZXR1cm4ge1xuICAgIC4uLnN0YXRlUHJvcHMsXG4gICAgLi4uZGlzcGF0Y2hQcm9wcyxcbiAgICAuLi5vd25Qcm9wcyxcbiAgICBib3VuZEdldEFzc2V0OiBkaXNwYXRjaFByb3BzLmJvdW5kR2V0QXNzZXQob3duUHJvcHMuY29sbGVjdGlvbiwgb3duUHJvcHMuZW50cnkpLFxuICB9O1xufTtcblxuY29uc3QgQ29ubmVjdGVkRW50cnlDYXJkID0gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcykoRW50cnlDYXJkKTtcblxuZXhwb3J0IGRlZmF1bHQgQ29ubmVjdGVkRW50cnlDYXJkO1xuIl19 */"));
const GridCardLink = (
/*#__PURE__*/
0, _styledBase.default)(_reactRouterDom.Link, {
  target: "eab48an3",
  label: "GridCardLink"
})("display:block;&,&:hover{background-color:", _netlifyCmsUiDefault.colors.foreground, ";color:", _netlifyCmsUiDefault.colors.text, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vRW50cmllcy9FbnRyeUNhcmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUNpQyIsImZpbGUiOiIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Db2xsZWN0aW9uL0VudHJpZXMvRW50cnlDYXJkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBnZXRBc3NldCB9IGZyb20gJ0FjdGlvbnMvbWVkaWEnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgY29sb3JzLCBjb2xvcnNSYXcsIGNvbXBvbmVudHMsIGxlbmd0aHMsIEFzc2V0IH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBWSUVXX1NUWUxFX0xJU1QsIFZJRVdfU1RZTEVfR1JJRCB9IGZyb20gJ0NvbnN0YW50cy9jb2xsZWN0aW9uVmlld3MnO1xuaW1wb3J0IHsgc3VtbWFyeUZvcm1hdHRlciB9IGZyb20gJ0xpYi9mb3JtYXR0ZXJzJztcblxuY29uc3QgTGlzdENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6ICR7bGVuZ3Rocy50b3BDYXJkV2lkdGh9O1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbmA7XG5cbmNvbnN0IExpc3RDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMTZweCAyMnB4O1xuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5mb3JlZ3JvdW5kfTtcbiAgfVxuYDtcblxuY29uc3QgR3JpZENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgZmxleDogMCAwIDMzNXB4O1xuICBoZWlnaHQ6IDI0MHB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbmA7XG5cbmNvbnN0IEdyaWRDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gICYsXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmZvcmVncm91bmR9O1xuICAgIGNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbiAgfVxuYDtcblxuY29uc3QgQ29sbGVjdGlvbkxhYmVsID0gc3R5bGVkLmgyYFxuICBmb250LXNpemU6IDEycHg7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5gO1xuXG5jb25zdCBMaXN0Q2FyZFRpdGxlID0gc3R5bGVkLmgyYFxuICBtYXJnaW4tYm90dG9tOiAwO1xuYDtcblxuY29uc3QgQ2FyZEhlYWRpbmcgPSBzdHlsZWQuaDJgXG4gIG1hcmdpbjogMCAwIDJweDtcbmA7XG5cbmNvbnN0IENhcmRCb2R5ID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZzogMTZweCAyMnB4O1xuICBoZWlnaHQ6IDkwcHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWFyZ2luLWJvdHRvbTogJHtwcm9wcyA9PiBwcm9wcy5oYXNJbWFnZSAmJiAwfTtcblxuICAmOmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgei1pbmRleDogMTtcbiAgICBib3R0b206IDA7XG4gICAgbGVmdDogLTIwJTtcbiAgICBoZWlnaHQ6IDE0MCU7XG4gICAgd2lkdGg6IDE0MCU7XG4gICAgYm94LXNoYWRvdzogaW5zZXQgMCAtMTVweCAyNHB4ICR7Y29sb3JzUmF3LndoaXRlfTtcbiAgfVxuYDtcblxuY29uc3QgQ2FyZEltYWdlID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7cHJvcHMgPT4gcHJvcHMudmFsdWU/LnRvU3RyaW5nKCl9KTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgaGVpZ2h0OiAxNTBweDtcbmA7XG5cbmNvbnN0IENhcmRJbWFnZUFzc2V0ID0gKHsgZ2V0QXNzZXQsIGltYWdlIH0pID0+IHtcbiAgcmV0dXJuIDxBc3NldCBwYXRoPXtpbWFnZX0gZ2V0QXNzZXQ9e2dldEFzc2V0fSBjb21wb25lbnQ9e0NhcmRJbWFnZX0gLz47XG59O1xuXG5jb25zdCBFbnRyeUNhcmQgPSAoe1xuICBwYXRoLFxuICBzdW1tYXJ5LFxuICBpbWFnZSxcbiAgY29sbGVjdGlvbkxhYmVsLFxuICB2aWV3U3R5bGUgPSBWSUVXX1NUWUxFX0xJU1QsXG4gIGJvdW5kR2V0QXNzZXQsXG59KSA9PiB7XG4gIGlmICh2aWV3U3R5bGUgPT09IFZJRVdfU1RZTEVfTElTVCkge1xuICAgIHJldHVybiAoXG4gICAgICA8TGlzdENhcmQ+XG4gICAgICAgIDxMaXN0Q2FyZExpbmsgdG89e3BhdGh9PlxuICAgICAgICAgIHtjb2xsZWN0aW9uTGFiZWwgPyA8Q29sbGVjdGlvbkxhYmVsPntjb2xsZWN0aW9uTGFiZWx9PC9Db2xsZWN0aW9uTGFiZWw+IDogbnVsbH1cbiAgICAgICAgICA8TGlzdENhcmRUaXRsZT57c3VtbWFyeX08L0xpc3RDYXJkVGl0bGU+XG4gICAgICAgIDwvTGlzdENhcmRMaW5rPlxuICAgICAgPC9MaXN0Q2FyZD5cbiAgICApO1xuICB9XG5cbiAgaWYgKHZpZXdTdHlsZSA9PT0gVklFV19TVFlMRV9HUklEKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxHcmlkQ2FyZD5cbiAgICAgICAgPEdyaWRDYXJkTGluayB0bz17cGF0aH0+XG4gICAgICAgICAgPENhcmRCb2R5IGhhc0ltYWdlPXtpbWFnZX0+XG4gICAgICAgICAgICB7Y29sbGVjdGlvbkxhYmVsID8gPENvbGxlY3Rpb25MYWJlbD57Y29sbGVjdGlvbkxhYmVsfTwvQ29sbGVjdGlvbkxhYmVsPiA6IG51bGx9XG4gICAgICAgICAgICA8Q2FyZEhlYWRpbmc+e3N1bW1hcnl9PC9DYXJkSGVhZGluZz5cbiAgICAgICAgICA8L0NhcmRCb2R5PlxuICAgICAgICAgIHtpbWFnZSA/IDxDYXJkSW1hZ2VBc3NldCBnZXRBc3NldD17Ym91bmRHZXRBc3NldH0gaW1hZ2U9e2ltYWdlfSAvPiA6IG51bGx9XG4gICAgICAgIDwvR3JpZENhcmRMaW5rPlxuICAgICAgPC9HcmlkQ2FyZD5cbiAgICApO1xuICB9XG59O1xuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUsIG93blByb3BzKSA9PiB7XG4gIGNvbnN0IHsgZW50cnksIGluZmVyZWRGaWVsZHMsIGNvbGxlY3Rpb24gfSA9IG93blByb3BzO1xuICBjb25zdCBsYWJlbCA9IGVudHJ5LmdldCgnbGFiZWwnKTtcbiAgY29uc3QgZW50cnlEYXRhID0gZW50cnkuZ2V0KCdkYXRhJyk7XG4gIGNvbnN0IGRlZmF1bHRUaXRsZSA9IGxhYmVsIHx8IGVudHJ5RGF0YS5nZXQoaW5mZXJlZEZpZWxkcy50aXRsZUZpZWxkKTtcbiAgY29uc3Qgc3VtbWFyeVRlbXBsYXRlID0gY29sbGVjdGlvbi5nZXQoJ3N1bW1hcnknKTtcbiAgY29uc3Qgc3VtbWFyeSA9IHN1bW1hcnlUZW1wbGF0ZVxuICAgID8gc3VtbWFyeUZvcm1hdHRlcihzdW1tYXJ5VGVtcGxhdGUsIGVudHJ5LCBjb2xsZWN0aW9uKVxuICAgIDogZGVmYXVsdFRpdGxlO1xuXG4gIGxldCBpbWFnZSA9IGVudHJ5RGF0YS5nZXQoaW5mZXJlZEZpZWxkcy5pbWFnZUZpZWxkKTtcbiAgaWYgKGltYWdlKSB7XG4gICAgaW1hZ2UgPSBlbmNvZGVVUkkoaW1hZ2UpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzdW1tYXJ5LFxuICAgIHBhdGg6IGAvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uLmdldCgnbmFtZScpfS9lbnRyaWVzLyR7ZW50cnkuZ2V0KCdzbHVnJyl9YCxcbiAgICBpbWFnZSxcbiAgfTtcbn07XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IHtcbiAgYm91bmRHZXRBc3NldDogKGNvbGxlY3Rpb24sIGVudHJ5KSA9PiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiBwYXRoID0+IHtcbiAgICByZXR1cm4gZ2V0QXNzZXQoeyBjb2xsZWN0aW9uLCBlbnRyeSwgcGF0aCB9KShkaXNwYXRjaCwgZ2V0U3RhdGUpO1xuICB9LFxufTtcblxuY29uc3QgbWVyZ2VQcm9wcyA9IChzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykgPT4ge1xuICByZXR1cm4ge1xuICAgIC4uLnN0YXRlUHJvcHMsXG4gICAgLi4uZGlzcGF0Y2hQcm9wcyxcbiAgICAuLi5vd25Qcm9wcyxcbiAgICBib3VuZEdldEFzc2V0OiBkaXNwYXRjaFByb3BzLmJvdW5kR2V0QXNzZXQob3duUHJvcHMuY29sbGVjdGlvbiwgb3duUHJvcHMuZW50cnkpLFxuICB9O1xufTtcblxuY29uc3QgQ29ubmVjdGVkRW50cnlDYXJkID0gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcykoRW50cnlDYXJkKTtcblxuZXhwb3J0IGRlZmF1bHQgQ29ubmVjdGVkRW50cnlDYXJkO1xuIl19 */"));
const CollectionLabel = (0, _styledBase.default)("h2", {
  target: "eab48an4",
  label: "CollectionLabel"
})("font-size:12px;color:", _netlifyCmsUiDefault.colors.textLead, ";text-transform:uppercase;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vRW50cmllcy9FbnRyeUNhcmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNENpQyIsImZpbGUiOiIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Db2xsZWN0aW9uL0VudHJpZXMvRW50cnlDYXJkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBnZXRBc3NldCB9IGZyb20gJ0FjdGlvbnMvbWVkaWEnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgY29sb3JzLCBjb2xvcnNSYXcsIGNvbXBvbmVudHMsIGxlbmd0aHMsIEFzc2V0IH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBWSUVXX1NUWUxFX0xJU1QsIFZJRVdfU1RZTEVfR1JJRCB9IGZyb20gJ0NvbnN0YW50cy9jb2xsZWN0aW9uVmlld3MnO1xuaW1wb3J0IHsgc3VtbWFyeUZvcm1hdHRlciB9IGZyb20gJ0xpYi9mb3JtYXR0ZXJzJztcblxuY29uc3QgTGlzdENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6ICR7bGVuZ3Rocy50b3BDYXJkV2lkdGh9O1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbmA7XG5cbmNvbnN0IExpc3RDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMTZweCAyMnB4O1xuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5mb3JlZ3JvdW5kfTtcbiAgfVxuYDtcblxuY29uc3QgR3JpZENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgZmxleDogMCAwIDMzNXB4O1xuICBoZWlnaHQ6IDI0MHB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbmA7XG5cbmNvbnN0IEdyaWRDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gICYsXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmZvcmVncm91bmR9O1xuICAgIGNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbiAgfVxuYDtcblxuY29uc3QgQ29sbGVjdGlvbkxhYmVsID0gc3R5bGVkLmgyYFxuICBmb250LXNpemU6IDEycHg7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5gO1xuXG5jb25zdCBMaXN0Q2FyZFRpdGxlID0gc3R5bGVkLmgyYFxuICBtYXJnaW4tYm90dG9tOiAwO1xuYDtcblxuY29uc3QgQ2FyZEhlYWRpbmcgPSBzdHlsZWQuaDJgXG4gIG1hcmdpbjogMCAwIDJweDtcbmA7XG5cbmNvbnN0IENhcmRCb2R5ID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZzogMTZweCAyMnB4O1xuICBoZWlnaHQ6IDkwcHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWFyZ2luLWJvdHRvbTogJHtwcm9wcyA9PiBwcm9wcy5oYXNJbWFnZSAmJiAwfTtcblxuICAmOmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgei1pbmRleDogMTtcbiAgICBib3R0b206IDA7XG4gICAgbGVmdDogLTIwJTtcbiAgICBoZWlnaHQ6IDE0MCU7XG4gICAgd2lkdGg6IDE0MCU7XG4gICAgYm94LXNoYWRvdzogaW5zZXQgMCAtMTVweCAyNHB4ICR7Y29sb3JzUmF3LndoaXRlfTtcbiAgfVxuYDtcblxuY29uc3QgQ2FyZEltYWdlID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7cHJvcHMgPT4gcHJvcHMudmFsdWU/LnRvU3RyaW5nKCl9KTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgaGVpZ2h0OiAxNTBweDtcbmA7XG5cbmNvbnN0IENhcmRJbWFnZUFzc2V0ID0gKHsgZ2V0QXNzZXQsIGltYWdlIH0pID0+IHtcbiAgcmV0dXJuIDxBc3NldCBwYXRoPXtpbWFnZX0gZ2V0QXNzZXQ9e2dldEFzc2V0fSBjb21wb25lbnQ9e0NhcmRJbWFnZX0gLz47XG59O1xuXG5jb25zdCBFbnRyeUNhcmQgPSAoe1xuICBwYXRoLFxuICBzdW1tYXJ5LFxuICBpbWFnZSxcbiAgY29sbGVjdGlvbkxhYmVsLFxuICB2aWV3U3R5bGUgPSBWSUVXX1NUWUxFX0xJU1QsXG4gIGJvdW5kR2V0QXNzZXQsXG59KSA9PiB7XG4gIGlmICh2aWV3U3R5bGUgPT09IFZJRVdfU1RZTEVfTElTVCkge1xuICAgIHJldHVybiAoXG4gICAgICA8TGlzdENhcmQ+XG4gICAgICAgIDxMaXN0Q2FyZExpbmsgdG89e3BhdGh9PlxuICAgICAgICAgIHtjb2xsZWN0aW9uTGFiZWwgPyA8Q29sbGVjdGlvbkxhYmVsPntjb2xsZWN0aW9uTGFiZWx9PC9Db2xsZWN0aW9uTGFiZWw+IDogbnVsbH1cbiAgICAgICAgICA8TGlzdENhcmRUaXRsZT57c3VtbWFyeX08L0xpc3RDYXJkVGl0bGU+XG4gICAgICAgIDwvTGlzdENhcmRMaW5rPlxuICAgICAgPC9MaXN0Q2FyZD5cbiAgICApO1xuICB9XG5cbiAgaWYgKHZpZXdTdHlsZSA9PT0gVklFV19TVFlMRV9HUklEKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxHcmlkQ2FyZD5cbiAgICAgICAgPEdyaWRDYXJkTGluayB0bz17cGF0aH0+XG4gICAgICAgICAgPENhcmRCb2R5IGhhc0ltYWdlPXtpbWFnZX0+XG4gICAgICAgICAgICB7Y29sbGVjdGlvbkxhYmVsID8gPENvbGxlY3Rpb25MYWJlbD57Y29sbGVjdGlvbkxhYmVsfTwvQ29sbGVjdGlvbkxhYmVsPiA6IG51bGx9XG4gICAgICAgICAgICA8Q2FyZEhlYWRpbmc+e3N1bW1hcnl9PC9DYXJkSGVhZGluZz5cbiAgICAgICAgICA8L0NhcmRCb2R5PlxuICAgICAgICAgIHtpbWFnZSA/IDxDYXJkSW1hZ2VBc3NldCBnZXRBc3NldD17Ym91bmRHZXRBc3NldH0gaW1hZ2U9e2ltYWdlfSAvPiA6IG51bGx9XG4gICAgICAgIDwvR3JpZENhcmRMaW5rPlxuICAgICAgPC9HcmlkQ2FyZD5cbiAgICApO1xuICB9XG59O1xuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUsIG93blByb3BzKSA9PiB7XG4gIGNvbnN0IHsgZW50cnksIGluZmVyZWRGaWVsZHMsIGNvbGxlY3Rpb24gfSA9IG93blByb3BzO1xuICBjb25zdCBsYWJlbCA9IGVudHJ5LmdldCgnbGFiZWwnKTtcbiAgY29uc3QgZW50cnlEYXRhID0gZW50cnkuZ2V0KCdkYXRhJyk7XG4gIGNvbnN0IGRlZmF1bHRUaXRsZSA9IGxhYmVsIHx8IGVudHJ5RGF0YS5nZXQoaW5mZXJlZEZpZWxkcy50aXRsZUZpZWxkKTtcbiAgY29uc3Qgc3VtbWFyeVRlbXBsYXRlID0gY29sbGVjdGlvbi5nZXQoJ3N1bW1hcnknKTtcbiAgY29uc3Qgc3VtbWFyeSA9IHN1bW1hcnlUZW1wbGF0ZVxuICAgID8gc3VtbWFyeUZvcm1hdHRlcihzdW1tYXJ5VGVtcGxhdGUsIGVudHJ5LCBjb2xsZWN0aW9uKVxuICAgIDogZGVmYXVsdFRpdGxlO1xuXG4gIGxldCBpbWFnZSA9IGVudHJ5RGF0YS5nZXQoaW5mZXJlZEZpZWxkcy5pbWFnZUZpZWxkKTtcbiAgaWYgKGltYWdlKSB7XG4gICAgaW1hZ2UgPSBlbmNvZGVVUkkoaW1hZ2UpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzdW1tYXJ5LFxuICAgIHBhdGg6IGAvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uLmdldCgnbmFtZScpfS9lbnRyaWVzLyR7ZW50cnkuZ2V0KCdzbHVnJyl9YCxcbiAgICBpbWFnZSxcbiAgfTtcbn07XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IHtcbiAgYm91bmRHZXRBc3NldDogKGNvbGxlY3Rpb24sIGVudHJ5KSA9PiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiBwYXRoID0+IHtcbiAgICByZXR1cm4gZ2V0QXNzZXQoeyBjb2xsZWN0aW9uLCBlbnRyeSwgcGF0aCB9KShkaXNwYXRjaCwgZ2V0U3RhdGUpO1xuICB9LFxufTtcblxuY29uc3QgbWVyZ2VQcm9wcyA9IChzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykgPT4ge1xuICByZXR1cm4ge1xuICAgIC4uLnN0YXRlUHJvcHMsXG4gICAgLi4uZGlzcGF0Y2hQcm9wcyxcbiAgICAuLi5vd25Qcm9wcyxcbiAgICBib3VuZEdldEFzc2V0OiBkaXNwYXRjaFByb3BzLmJvdW5kR2V0QXNzZXQob3duUHJvcHMuY29sbGVjdGlvbiwgb3duUHJvcHMuZW50cnkpLFxuICB9O1xufTtcblxuY29uc3QgQ29ubmVjdGVkRW50cnlDYXJkID0gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcykoRW50cnlDYXJkKTtcblxuZXhwb3J0IGRlZmF1bHQgQ29ubmVjdGVkRW50cnlDYXJkO1xuIl19 */"));
const ListCardTitle = (0, _styledBase.default)("h2", {
  target: "eab48an5",
  label: "ListCardTitle"
})(process.env.NODE_ENV === "production" ? {
  name: "gx0lhm",
  styles: "margin-bottom:0;"
} : {
  name: "gx0lhm",
  styles: "margin-bottom:0;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vRW50cmllcy9FbnRyeUNhcmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0QrQiIsImZpbGUiOiIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Db2xsZWN0aW9uL0VudHJpZXMvRW50cnlDYXJkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBnZXRBc3NldCB9IGZyb20gJ0FjdGlvbnMvbWVkaWEnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgY29sb3JzLCBjb2xvcnNSYXcsIGNvbXBvbmVudHMsIGxlbmd0aHMsIEFzc2V0IH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBWSUVXX1NUWUxFX0xJU1QsIFZJRVdfU1RZTEVfR1JJRCB9IGZyb20gJ0NvbnN0YW50cy9jb2xsZWN0aW9uVmlld3MnO1xuaW1wb3J0IHsgc3VtbWFyeUZvcm1hdHRlciB9IGZyb20gJ0xpYi9mb3JtYXR0ZXJzJztcblxuY29uc3QgTGlzdENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6ICR7bGVuZ3Rocy50b3BDYXJkV2lkdGh9O1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbmA7XG5cbmNvbnN0IExpc3RDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMTZweCAyMnB4O1xuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5mb3JlZ3JvdW5kfTtcbiAgfVxuYDtcblxuY29uc3QgR3JpZENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgZmxleDogMCAwIDMzNXB4O1xuICBoZWlnaHQ6IDI0MHB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbmA7XG5cbmNvbnN0IEdyaWRDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gICYsXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmZvcmVncm91bmR9O1xuICAgIGNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbiAgfVxuYDtcblxuY29uc3QgQ29sbGVjdGlvbkxhYmVsID0gc3R5bGVkLmgyYFxuICBmb250LXNpemU6IDEycHg7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5gO1xuXG5jb25zdCBMaXN0Q2FyZFRpdGxlID0gc3R5bGVkLmgyYFxuICBtYXJnaW4tYm90dG9tOiAwO1xuYDtcblxuY29uc3QgQ2FyZEhlYWRpbmcgPSBzdHlsZWQuaDJgXG4gIG1hcmdpbjogMCAwIDJweDtcbmA7XG5cbmNvbnN0IENhcmRCb2R5ID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZzogMTZweCAyMnB4O1xuICBoZWlnaHQ6IDkwcHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWFyZ2luLWJvdHRvbTogJHtwcm9wcyA9PiBwcm9wcy5oYXNJbWFnZSAmJiAwfTtcblxuICAmOmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgei1pbmRleDogMTtcbiAgICBib3R0b206IDA7XG4gICAgbGVmdDogLTIwJTtcbiAgICBoZWlnaHQ6IDE0MCU7XG4gICAgd2lkdGg6IDE0MCU7XG4gICAgYm94LXNoYWRvdzogaW5zZXQgMCAtMTVweCAyNHB4ICR7Y29sb3JzUmF3LndoaXRlfTtcbiAgfVxuYDtcblxuY29uc3QgQ2FyZEltYWdlID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7cHJvcHMgPT4gcHJvcHMudmFsdWU/LnRvU3RyaW5nKCl9KTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgaGVpZ2h0OiAxNTBweDtcbmA7XG5cbmNvbnN0IENhcmRJbWFnZUFzc2V0ID0gKHsgZ2V0QXNzZXQsIGltYWdlIH0pID0+IHtcbiAgcmV0dXJuIDxBc3NldCBwYXRoPXtpbWFnZX0gZ2V0QXNzZXQ9e2dldEFzc2V0fSBjb21wb25lbnQ9e0NhcmRJbWFnZX0gLz47XG59O1xuXG5jb25zdCBFbnRyeUNhcmQgPSAoe1xuICBwYXRoLFxuICBzdW1tYXJ5LFxuICBpbWFnZSxcbiAgY29sbGVjdGlvbkxhYmVsLFxuICB2aWV3U3R5bGUgPSBWSUVXX1NUWUxFX0xJU1QsXG4gIGJvdW5kR2V0QXNzZXQsXG59KSA9PiB7XG4gIGlmICh2aWV3U3R5bGUgPT09IFZJRVdfU1RZTEVfTElTVCkge1xuICAgIHJldHVybiAoXG4gICAgICA8TGlzdENhcmQ+XG4gICAgICAgIDxMaXN0Q2FyZExpbmsgdG89e3BhdGh9PlxuICAgICAgICAgIHtjb2xsZWN0aW9uTGFiZWwgPyA8Q29sbGVjdGlvbkxhYmVsPntjb2xsZWN0aW9uTGFiZWx9PC9Db2xsZWN0aW9uTGFiZWw+IDogbnVsbH1cbiAgICAgICAgICA8TGlzdENhcmRUaXRsZT57c3VtbWFyeX08L0xpc3RDYXJkVGl0bGU+XG4gICAgICAgIDwvTGlzdENhcmRMaW5rPlxuICAgICAgPC9MaXN0Q2FyZD5cbiAgICApO1xuICB9XG5cbiAgaWYgKHZpZXdTdHlsZSA9PT0gVklFV19TVFlMRV9HUklEKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxHcmlkQ2FyZD5cbiAgICAgICAgPEdyaWRDYXJkTGluayB0bz17cGF0aH0+XG4gICAgICAgICAgPENhcmRCb2R5IGhhc0ltYWdlPXtpbWFnZX0+XG4gICAgICAgICAgICB7Y29sbGVjdGlvbkxhYmVsID8gPENvbGxlY3Rpb25MYWJlbD57Y29sbGVjdGlvbkxhYmVsfTwvQ29sbGVjdGlvbkxhYmVsPiA6IG51bGx9XG4gICAgICAgICAgICA8Q2FyZEhlYWRpbmc+e3N1bW1hcnl9PC9DYXJkSGVhZGluZz5cbiAgICAgICAgICA8L0NhcmRCb2R5PlxuICAgICAgICAgIHtpbWFnZSA/IDxDYXJkSW1hZ2VBc3NldCBnZXRBc3NldD17Ym91bmRHZXRBc3NldH0gaW1hZ2U9e2ltYWdlfSAvPiA6IG51bGx9XG4gICAgICAgIDwvR3JpZENhcmRMaW5rPlxuICAgICAgPC9HcmlkQ2FyZD5cbiAgICApO1xuICB9XG59O1xuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUsIG93blByb3BzKSA9PiB7XG4gIGNvbnN0IHsgZW50cnksIGluZmVyZWRGaWVsZHMsIGNvbGxlY3Rpb24gfSA9IG93blByb3BzO1xuICBjb25zdCBsYWJlbCA9IGVudHJ5LmdldCgnbGFiZWwnKTtcbiAgY29uc3QgZW50cnlEYXRhID0gZW50cnkuZ2V0KCdkYXRhJyk7XG4gIGNvbnN0IGRlZmF1bHRUaXRsZSA9IGxhYmVsIHx8IGVudHJ5RGF0YS5nZXQoaW5mZXJlZEZpZWxkcy50aXRsZUZpZWxkKTtcbiAgY29uc3Qgc3VtbWFyeVRlbXBsYXRlID0gY29sbGVjdGlvbi5nZXQoJ3N1bW1hcnknKTtcbiAgY29uc3Qgc3VtbWFyeSA9IHN1bW1hcnlUZW1wbGF0ZVxuICAgID8gc3VtbWFyeUZvcm1hdHRlcihzdW1tYXJ5VGVtcGxhdGUsIGVudHJ5LCBjb2xsZWN0aW9uKVxuICAgIDogZGVmYXVsdFRpdGxlO1xuXG4gIGxldCBpbWFnZSA9IGVudHJ5RGF0YS5nZXQoaW5mZXJlZEZpZWxkcy5pbWFnZUZpZWxkKTtcbiAgaWYgKGltYWdlKSB7XG4gICAgaW1hZ2UgPSBlbmNvZGVVUkkoaW1hZ2UpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzdW1tYXJ5LFxuICAgIHBhdGg6IGAvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uLmdldCgnbmFtZScpfS9lbnRyaWVzLyR7ZW50cnkuZ2V0KCdzbHVnJyl9YCxcbiAgICBpbWFnZSxcbiAgfTtcbn07XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IHtcbiAgYm91bmRHZXRBc3NldDogKGNvbGxlY3Rpb24sIGVudHJ5KSA9PiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiBwYXRoID0+IHtcbiAgICByZXR1cm4gZ2V0QXNzZXQoeyBjb2xsZWN0aW9uLCBlbnRyeSwgcGF0aCB9KShkaXNwYXRjaCwgZ2V0U3RhdGUpO1xuICB9LFxufTtcblxuY29uc3QgbWVyZ2VQcm9wcyA9IChzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykgPT4ge1xuICByZXR1cm4ge1xuICAgIC4uLnN0YXRlUHJvcHMsXG4gICAgLi4uZGlzcGF0Y2hQcm9wcyxcbiAgICAuLi5vd25Qcm9wcyxcbiAgICBib3VuZEdldEFzc2V0OiBkaXNwYXRjaFByb3BzLmJvdW5kR2V0QXNzZXQob3duUHJvcHMuY29sbGVjdGlvbiwgb3duUHJvcHMuZW50cnkpLFxuICB9O1xufTtcblxuY29uc3QgQ29ubmVjdGVkRW50cnlDYXJkID0gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcykoRW50cnlDYXJkKTtcblxuZXhwb3J0IGRlZmF1bHQgQ29ubmVjdGVkRW50cnlDYXJkO1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const CardHeading = (0, _styledBase.default)("h2", {
  target: "eab48an6",
  label: "CardHeading"
})(process.env.NODE_ENV === "production" ? {
  name: "1kpnu25",
  styles: "margin:0 0 2px;"
} : {
  name: "1kpnu25",
  styles: "margin:0 0 2px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vRW50cmllcy9FbnRyeUNhcmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0Q2QiIsImZpbGUiOiIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Db2xsZWN0aW9uL0VudHJpZXMvRW50cnlDYXJkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBnZXRBc3NldCB9IGZyb20gJ0FjdGlvbnMvbWVkaWEnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgY29sb3JzLCBjb2xvcnNSYXcsIGNvbXBvbmVudHMsIGxlbmd0aHMsIEFzc2V0IH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBWSUVXX1NUWUxFX0xJU1QsIFZJRVdfU1RZTEVfR1JJRCB9IGZyb20gJ0NvbnN0YW50cy9jb2xsZWN0aW9uVmlld3MnO1xuaW1wb3J0IHsgc3VtbWFyeUZvcm1hdHRlciB9IGZyb20gJ0xpYi9mb3JtYXR0ZXJzJztcblxuY29uc3QgTGlzdENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6ICR7bGVuZ3Rocy50b3BDYXJkV2lkdGh9O1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbmA7XG5cbmNvbnN0IExpc3RDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMTZweCAyMnB4O1xuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5mb3JlZ3JvdW5kfTtcbiAgfVxuYDtcblxuY29uc3QgR3JpZENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgZmxleDogMCAwIDMzNXB4O1xuICBoZWlnaHQ6IDI0MHB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbmA7XG5cbmNvbnN0IEdyaWRDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gICYsXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmZvcmVncm91bmR9O1xuICAgIGNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbiAgfVxuYDtcblxuY29uc3QgQ29sbGVjdGlvbkxhYmVsID0gc3R5bGVkLmgyYFxuICBmb250LXNpemU6IDEycHg7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5gO1xuXG5jb25zdCBMaXN0Q2FyZFRpdGxlID0gc3R5bGVkLmgyYFxuICBtYXJnaW4tYm90dG9tOiAwO1xuYDtcblxuY29uc3QgQ2FyZEhlYWRpbmcgPSBzdHlsZWQuaDJgXG4gIG1hcmdpbjogMCAwIDJweDtcbmA7XG5cbmNvbnN0IENhcmRCb2R5ID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZzogMTZweCAyMnB4O1xuICBoZWlnaHQ6IDkwcHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWFyZ2luLWJvdHRvbTogJHtwcm9wcyA9PiBwcm9wcy5oYXNJbWFnZSAmJiAwfTtcblxuICAmOmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgei1pbmRleDogMTtcbiAgICBib3R0b206IDA7XG4gICAgbGVmdDogLTIwJTtcbiAgICBoZWlnaHQ6IDE0MCU7XG4gICAgd2lkdGg6IDE0MCU7XG4gICAgYm94LXNoYWRvdzogaW5zZXQgMCAtMTVweCAyNHB4ICR7Y29sb3JzUmF3LndoaXRlfTtcbiAgfVxuYDtcblxuY29uc3QgQ2FyZEltYWdlID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7cHJvcHMgPT4gcHJvcHMudmFsdWU/LnRvU3RyaW5nKCl9KTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgaGVpZ2h0OiAxNTBweDtcbmA7XG5cbmNvbnN0IENhcmRJbWFnZUFzc2V0ID0gKHsgZ2V0QXNzZXQsIGltYWdlIH0pID0+IHtcbiAgcmV0dXJuIDxBc3NldCBwYXRoPXtpbWFnZX0gZ2V0QXNzZXQ9e2dldEFzc2V0fSBjb21wb25lbnQ9e0NhcmRJbWFnZX0gLz47XG59O1xuXG5jb25zdCBFbnRyeUNhcmQgPSAoe1xuICBwYXRoLFxuICBzdW1tYXJ5LFxuICBpbWFnZSxcbiAgY29sbGVjdGlvbkxhYmVsLFxuICB2aWV3U3R5bGUgPSBWSUVXX1NUWUxFX0xJU1QsXG4gIGJvdW5kR2V0QXNzZXQsXG59KSA9PiB7XG4gIGlmICh2aWV3U3R5bGUgPT09IFZJRVdfU1RZTEVfTElTVCkge1xuICAgIHJldHVybiAoXG4gICAgICA8TGlzdENhcmQ+XG4gICAgICAgIDxMaXN0Q2FyZExpbmsgdG89e3BhdGh9PlxuICAgICAgICAgIHtjb2xsZWN0aW9uTGFiZWwgPyA8Q29sbGVjdGlvbkxhYmVsPntjb2xsZWN0aW9uTGFiZWx9PC9Db2xsZWN0aW9uTGFiZWw+IDogbnVsbH1cbiAgICAgICAgICA8TGlzdENhcmRUaXRsZT57c3VtbWFyeX08L0xpc3RDYXJkVGl0bGU+XG4gICAgICAgIDwvTGlzdENhcmRMaW5rPlxuICAgICAgPC9MaXN0Q2FyZD5cbiAgICApO1xuICB9XG5cbiAgaWYgKHZpZXdTdHlsZSA9PT0gVklFV19TVFlMRV9HUklEKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxHcmlkQ2FyZD5cbiAgICAgICAgPEdyaWRDYXJkTGluayB0bz17cGF0aH0+XG4gICAgICAgICAgPENhcmRCb2R5IGhhc0ltYWdlPXtpbWFnZX0+XG4gICAgICAgICAgICB7Y29sbGVjdGlvbkxhYmVsID8gPENvbGxlY3Rpb25MYWJlbD57Y29sbGVjdGlvbkxhYmVsfTwvQ29sbGVjdGlvbkxhYmVsPiA6IG51bGx9XG4gICAgICAgICAgICA8Q2FyZEhlYWRpbmc+e3N1bW1hcnl9PC9DYXJkSGVhZGluZz5cbiAgICAgICAgICA8L0NhcmRCb2R5PlxuICAgICAgICAgIHtpbWFnZSA/IDxDYXJkSW1hZ2VBc3NldCBnZXRBc3NldD17Ym91bmRHZXRBc3NldH0gaW1hZ2U9e2ltYWdlfSAvPiA6IG51bGx9XG4gICAgICAgIDwvR3JpZENhcmRMaW5rPlxuICAgICAgPC9HcmlkQ2FyZD5cbiAgICApO1xuICB9XG59O1xuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUsIG93blByb3BzKSA9PiB7XG4gIGNvbnN0IHsgZW50cnksIGluZmVyZWRGaWVsZHMsIGNvbGxlY3Rpb24gfSA9IG93blByb3BzO1xuICBjb25zdCBsYWJlbCA9IGVudHJ5LmdldCgnbGFiZWwnKTtcbiAgY29uc3QgZW50cnlEYXRhID0gZW50cnkuZ2V0KCdkYXRhJyk7XG4gIGNvbnN0IGRlZmF1bHRUaXRsZSA9IGxhYmVsIHx8IGVudHJ5RGF0YS5nZXQoaW5mZXJlZEZpZWxkcy50aXRsZUZpZWxkKTtcbiAgY29uc3Qgc3VtbWFyeVRlbXBsYXRlID0gY29sbGVjdGlvbi5nZXQoJ3N1bW1hcnknKTtcbiAgY29uc3Qgc3VtbWFyeSA9IHN1bW1hcnlUZW1wbGF0ZVxuICAgID8gc3VtbWFyeUZvcm1hdHRlcihzdW1tYXJ5VGVtcGxhdGUsIGVudHJ5LCBjb2xsZWN0aW9uKVxuICAgIDogZGVmYXVsdFRpdGxlO1xuXG4gIGxldCBpbWFnZSA9IGVudHJ5RGF0YS5nZXQoaW5mZXJlZEZpZWxkcy5pbWFnZUZpZWxkKTtcbiAgaWYgKGltYWdlKSB7XG4gICAgaW1hZ2UgPSBlbmNvZGVVUkkoaW1hZ2UpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzdW1tYXJ5LFxuICAgIHBhdGg6IGAvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uLmdldCgnbmFtZScpfS9lbnRyaWVzLyR7ZW50cnkuZ2V0KCdzbHVnJyl9YCxcbiAgICBpbWFnZSxcbiAgfTtcbn07XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IHtcbiAgYm91bmRHZXRBc3NldDogKGNvbGxlY3Rpb24sIGVudHJ5KSA9PiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiBwYXRoID0+IHtcbiAgICByZXR1cm4gZ2V0QXNzZXQoeyBjb2xsZWN0aW9uLCBlbnRyeSwgcGF0aCB9KShkaXNwYXRjaCwgZ2V0U3RhdGUpO1xuICB9LFxufTtcblxuY29uc3QgbWVyZ2VQcm9wcyA9IChzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykgPT4ge1xuICByZXR1cm4ge1xuICAgIC4uLnN0YXRlUHJvcHMsXG4gICAgLi4uZGlzcGF0Y2hQcm9wcyxcbiAgICAuLi5vd25Qcm9wcyxcbiAgICBib3VuZEdldEFzc2V0OiBkaXNwYXRjaFByb3BzLmJvdW5kR2V0QXNzZXQob3duUHJvcHMuY29sbGVjdGlvbiwgb3duUHJvcHMuZW50cnkpLFxuICB9O1xufTtcblxuY29uc3QgQ29ubmVjdGVkRW50cnlDYXJkID0gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcykoRW50cnlDYXJkKTtcblxuZXhwb3J0IGRlZmF1bHQgQ29ubmVjdGVkRW50cnlDYXJkO1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const CardBody = (0, _styledBase.default)("div", {
  target: "eab48an7",
  label: "CardBody"
})("padding:16px 22px;height:90px;position:relative;margin-bottom:", props => props.hasImage && 0, ";&:after{content:'';position:absolute;display:block;z-index:1;bottom:0;left:-20%;height:140%;width:140%;box-shadow:inset 0 -15px 24px ", _netlifyCmsUiDefault.colorsRaw.white, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vRW50cmllcy9FbnRyeUNhcmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMEQyQiIsImZpbGUiOiIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Db2xsZWN0aW9uL0VudHJpZXMvRW50cnlDYXJkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBnZXRBc3NldCB9IGZyb20gJ0FjdGlvbnMvbWVkaWEnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgY29sb3JzLCBjb2xvcnNSYXcsIGNvbXBvbmVudHMsIGxlbmd0aHMsIEFzc2V0IH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBWSUVXX1NUWUxFX0xJU1QsIFZJRVdfU1RZTEVfR1JJRCB9IGZyb20gJ0NvbnN0YW50cy9jb2xsZWN0aW9uVmlld3MnO1xuaW1wb3J0IHsgc3VtbWFyeUZvcm1hdHRlciB9IGZyb20gJ0xpYi9mb3JtYXR0ZXJzJztcblxuY29uc3QgTGlzdENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6ICR7bGVuZ3Rocy50b3BDYXJkV2lkdGh9O1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbmA7XG5cbmNvbnN0IExpc3RDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMTZweCAyMnB4O1xuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5mb3JlZ3JvdW5kfTtcbiAgfVxuYDtcblxuY29uc3QgR3JpZENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgZmxleDogMCAwIDMzNXB4O1xuICBoZWlnaHQ6IDI0MHB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbmA7XG5cbmNvbnN0IEdyaWRDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gICYsXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmZvcmVncm91bmR9O1xuICAgIGNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbiAgfVxuYDtcblxuY29uc3QgQ29sbGVjdGlvbkxhYmVsID0gc3R5bGVkLmgyYFxuICBmb250LXNpemU6IDEycHg7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5gO1xuXG5jb25zdCBMaXN0Q2FyZFRpdGxlID0gc3R5bGVkLmgyYFxuICBtYXJnaW4tYm90dG9tOiAwO1xuYDtcblxuY29uc3QgQ2FyZEhlYWRpbmcgPSBzdHlsZWQuaDJgXG4gIG1hcmdpbjogMCAwIDJweDtcbmA7XG5cbmNvbnN0IENhcmRCb2R5ID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZzogMTZweCAyMnB4O1xuICBoZWlnaHQ6IDkwcHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWFyZ2luLWJvdHRvbTogJHtwcm9wcyA9PiBwcm9wcy5oYXNJbWFnZSAmJiAwfTtcblxuICAmOmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgei1pbmRleDogMTtcbiAgICBib3R0b206IDA7XG4gICAgbGVmdDogLTIwJTtcbiAgICBoZWlnaHQ6IDE0MCU7XG4gICAgd2lkdGg6IDE0MCU7XG4gICAgYm94LXNoYWRvdzogaW5zZXQgMCAtMTVweCAyNHB4ICR7Y29sb3JzUmF3LndoaXRlfTtcbiAgfVxuYDtcblxuY29uc3QgQ2FyZEltYWdlID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7cHJvcHMgPT4gcHJvcHMudmFsdWU/LnRvU3RyaW5nKCl9KTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgaGVpZ2h0OiAxNTBweDtcbmA7XG5cbmNvbnN0IENhcmRJbWFnZUFzc2V0ID0gKHsgZ2V0QXNzZXQsIGltYWdlIH0pID0+IHtcbiAgcmV0dXJuIDxBc3NldCBwYXRoPXtpbWFnZX0gZ2V0QXNzZXQ9e2dldEFzc2V0fSBjb21wb25lbnQ9e0NhcmRJbWFnZX0gLz47XG59O1xuXG5jb25zdCBFbnRyeUNhcmQgPSAoe1xuICBwYXRoLFxuICBzdW1tYXJ5LFxuICBpbWFnZSxcbiAgY29sbGVjdGlvbkxhYmVsLFxuICB2aWV3U3R5bGUgPSBWSUVXX1NUWUxFX0xJU1QsXG4gIGJvdW5kR2V0QXNzZXQsXG59KSA9PiB7XG4gIGlmICh2aWV3U3R5bGUgPT09IFZJRVdfU1RZTEVfTElTVCkge1xuICAgIHJldHVybiAoXG4gICAgICA8TGlzdENhcmQ+XG4gICAgICAgIDxMaXN0Q2FyZExpbmsgdG89e3BhdGh9PlxuICAgICAgICAgIHtjb2xsZWN0aW9uTGFiZWwgPyA8Q29sbGVjdGlvbkxhYmVsPntjb2xsZWN0aW9uTGFiZWx9PC9Db2xsZWN0aW9uTGFiZWw+IDogbnVsbH1cbiAgICAgICAgICA8TGlzdENhcmRUaXRsZT57c3VtbWFyeX08L0xpc3RDYXJkVGl0bGU+XG4gICAgICAgIDwvTGlzdENhcmRMaW5rPlxuICAgICAgPC9MaXN0Q2FyZD5cbiAgICApO1xuICB9XG5cbiAgaWYgKHZpZXdTdHlsZSA9PT0gVklFV19TVFlMRV9HUklEKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxHcmlkQ2FyZD5cbiAgICAgICAgPEdyaWRDYXJkTGluayB0bz17cGF0aH0+XG4gICAgICAgICAgPENhcmRCb2R5IGhhc0ltYWdlPXtpbWFnZX0+XG4gICAgICAgICAgICB7Y29sbGVjdGlvbkxhYmVsID8gPENvbGxlY3Rpb25MYWJlbD57Y29sbGVjdGlvbkxhYmVsfTwvQ29sbGVjdGlvbkxhYmVsPiA6IG51bGx9XG4gICAgICAgICAgICA8Q2FyZEhlYWRpbmc+e3N1bW1hcnl9PC9DYXJkSGVhZGluZz5cbiAgICAgICAgICA8L0NhcmRCb2R5PlxuICAgICAgICAgIHtpbWFnZSA/IDxDYXJkSW1hZ2VBc3NldCBnZXRBc3NldD17Ym91bmRHZXRBc3NldH0gaW1hZ2U9e2ltYWdlfSAvPiA6IG51bGx9XG4gICAgICAgIDwvR3JpZENhcmRMaW5rPlxuICAgICAgPC9HcmlkQ2FyZD5cbiAgICApO1xuICB9XG59O1xuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUsIG93blByb3BzKSA9PiB7XG4gIGNvbnN0IHsgZW50cnksIGluZmVyZWRGaWVsZHMsIGNvbGxlY3Rpb24gfSA9IG93blByb3BzO1xuICBjb25zdCBsYWJlbCA9IGVudHJ5LmdldCgnbGFiZWwnKTtcbiAgY29uc3QgZW50cnlEYXRhID0gZW50cnkuZ2V0KCdkYXRhJyk7XG4gIGNvbnN0IGRlZmF1bHRUaXRsZSA9IGxhYmVsIHx8IGVudHJ5RGF0YS5nZXQoaW5mZXJlZEZpZWxkcy50aXRsZUZpZWxkKTtcbiAgY29uc3Qgc3VtbWFyeVRlbXBsYXRlID0gY29sbGVjdGlvbi5nZXQoJ3N1bW1hcnknKTtcbiAgY29uc3Qgc3VtbWFyeSA9IHN1bW1hcnlUZW1wbGF0ZVxuICAgID8gc3VtbWFyeUZvcm1hdHRlcihzdW1tYXJ5VGVtcGxhdGUsIGVudHJ5LCBjb2xsZWN0aW9uKVxuICAgIDogZGVmYXVsdFRpdGxlO1xuXG4gIGxldCBpbWFnZSA9IGVudHJ5RGF0YS5nZXQoaW5mZXJlZEZpZWxkcy5pbWFnZUZpZWxkKTtcbiAgaWYgKGltYWdlKSB7XG4gICAgaW1hZ2UgPSBlbmNvZGVVUkkoaW1hZ2UpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzdW1tYXJ5LFxuICAgIHBhdGg6IGAvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uLmdldCgnbmFtZScpfS9lbnRyaWVzLyR7ZW50cnkuZ2V0KCdzbHVnJyl9YCxcbiAgICBpbWFnZSxcbiAgfTtcbn07XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IHtcbiAgYm91bmRHZXRBc3NldDogKGNvbGxlY3Rpb24sIGVudHJ5KSA9PiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiBwYXRoID0+IHtcbiAgICByZXR1cm4gZ2V0QXNzZXQoeyBjb2xsZWN0aW9uLCBlbnRyeSwgcGF0aCB9KShkaXNwYXRjaCwgZ2V0U3RhdGUpO1xuICB9LFxufTtcblxuY29uc3QgbWVyZ2VQcm9wcyA9IChzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykgPT4ge1xuICByZXR1cm4ge1xuICAgIC4uLnN0YXRlUHJvcHMsXG4gICAgLi4uZGlzcGF0Y2hQcm9wcyxcbiAgICAuLi5vd25Qcm9wcyxcbiAgICBib3VuZEdldEFzc2V0OiBkaXNwYXRjaFByb3BzLmJvdW5kR2V0QXNzZXQob3duUHJvcHMuY29sbGVjdGlvbiwgb3duUHJvcHMuZW50cnkpLFxuICB9O1xufTtcblxuY29uc3QgQ29ubmVjdGVkRW50cnlDYXJkID0gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcykoRW50cnlDYXJkKTtcblxuZXhwb3J0IGRlZmF1bHQgQ29ubmVjdGVkRW50cnlDYXJkO1xuIl19 */"));
const CardImage = (0, _styledBase.default)("div", {
  target: "eab48an8",
  label: "CardImage"
})("background-image:url(", props => {
  var _props$value;

  return (_props$value = props.value) === null || _props$value === void 0 ? void 0 : _props$value.toString();
}, ");background-position:center center;background-size:cover;background-repeat:no-repeat;height:150px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vRW50cmllcy9FbnRyeUNhcmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNkU0QiIsImZpbGUiOiIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Db2xsZWN0aW9uL0VudHJpZXMvRW50cnlDYXJkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBnZXRBc3NldCB9IGZyb20gJ0FjdGlvbnMvbWVkaWEnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgY29sb3JzLCBjb2xvcnNSYXcsIGNvbXBvbmVudHMsIGxlbmd0aHMsIEFzc2V0IH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBWSUVXX1NUWUxFX0xJU1QsIFZJRVdfU1RZTEVfR1JJRCB9IGZyb20gJ0NvbnN0YW50cy9jb2xsZWN0aW9uVmlld3MnO1xuaW1wb3J0IHsgc3VtbWFyeUZvcm1hdHRlciB9IGZyb20gJ0xpYi9mb3JtYXR0ZXJzJztcblxuY29uc3QgTGlzdENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgd2lkdGg6ICR7bGVuZ3Rocy50b3BDYXJkV2lkdGh9O1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbmA7XG5cbmNvbnN0IExpc3RDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMTZweCAyMnB4O1xuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5mb3JlZ3JvdW5kfTtcbiAgfVxuYDtcblxuY29uc3QgR3JpZENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgZmxleDogMCAwIDMzNXB4O1xuICBoZWlnaHQ6IDI0MHB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbmA7XG5cbmNvbnN0IEdyaWRDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gICYsXG4gICY6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmZvcmVncm91bmR9O1xuICAgIGNvbG9yOiAke2NvbG9ycy50ZXh0fTtcbiAgfVxuYDtcblxuY29uc3QgQ29sbGVjdGlvbkxhYmVsID0gc3R5bGVkLmgyYFxuICBmb250LXNpemU6IDEycHg7XG4gIGNvbG9yOiAke2NvbG9ycy50ZXh0TGVhZH07XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5gO1xuXG5jb25zdCBMaXN0Q2FyZFRpdGxlID0gc3R5bGVkLmgyYFxuICBtYXJnaW4tYm90dG9tOiAwO1xuYDtcblxuY29uc3QgQ2FyZEhlYWRpbmcgPSBzdHlsZWQuaDJgXG4gIG1hcmdpbjogMCAwIDJweDtcbmA7XG5cbmNvbnN0IENhcmRCb2R5ID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZzogMTZweCAyMnB4O1xuICBoZWlnaHQ6IDkwcHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWFyZ2luLWJvdHRvbTogJHtwcm9wcyA9PiBwcm9wcy5oYXNJbWFnZSAmJiAwfTtcblxuICAmOmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgei1pbmRleDogMTtcbiAgICBib3R0b206IDA7XG4gICAgbGVmdDogLTIwJTtcbiAgICBoZWlnaHQ6IDE0MCU7XG4gICAgd2lkdGg6IDE0MCU7XG4gICAgYm94LXNoYWRvdzogaW5zZXQgMCAtMTVweCAyNHB4ICR7Y29sb3JzUmF3LndoaXRlfTtcbiAgfVxuYDtcblxuY29uc3QgQ2FyZEltYWdlID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7cHJvcHMgPT4gcHJvcHMudmFsdWU/LnRvU3RyaW5nKCl9KTtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgaGVpZ2h0OiAxNTBweDtcbmA7XG5cbmNvbnN0IENhcmRJbWFnZUFzc2V0ID0gKHsgZ2V0QXNzZXQsIGltYWdlIH0pID0+IHtcbiAgcmV0dXJuIDxBc3NldCBwYXRoPXtpbWFnZX0gZ2V0QXNzZXQ9e2dldEFzc2V0fSBjb21wb25lbnQ9e0NhcmRJbWFnZX0gLz47XG59O1xuXG5jb25zdCBFbnRyeUNhcmQgPSAoe1xuICBwYXRoLFxuICBzdW1tYXJ5LFxuICBpbWFnZSxcbiAgY29sbGVjdGlvbkxhYmVsLFxuICB2aWV3U3R5bGUgPSBWSUVXX1NUWUxFX0xJU1QsXG4gIGJvdW5kR2V0QXNzZXQsXG59KSA9PiB7XG4gIGlmICh2aWV3U3R5bGUgPT09IFZJRVdfU1RZTEVfTElTVCkge1xuICAgIHJldHVybiAoXG4gICAgICA8TGlzdENhcmQ+XG4gICAgICAgIDxMaXN0Q2FyZExpbmsgdG89e3BhdGh9PlxuICAgICAgICAgIHtjb2xsZWN0aW9uTGFiZWwgPyA8Q29sbGVjdGlvbkxhYmVsPntjb2xsZWN0aW9uTGFiZWx9PC9Db2xsZWN0aW9uTGFiZWw+IDogbnVsbH1cbiAgICAgICAgICA8TGlzdENhcmRUaXRsZT57c3VtbWFyeX08L0xpc3RDYXJkVGl0bGU+XG4gICAgICAgIDwvTGlzdENhcmRMaW5rPlxuICAgICAgPC9MaXN0Q2FyZD5cbiAgICApO1xuICB9XG5cbiAgaWYgKHZpZXdTdHlsZSA9PT0gVklFV19TVFlMRV9HUklEKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxHcmlkQ2FyZD5cbiAgICAgICAgPEdyaWRDYXJkTGluayB0bz17cGF0aH0+XG4gICAgICAgICAgPENhcmRCb2R5IGhhc0ltYWdlPXtpbWFnZX0+XG4gICAgICAgICAgICB7Y29sbGVjdGlvbkxhYmVsID8gPENvbGxlY3Rpb25MYWJlbD57Y29sbGVjdGlvbkxhYmVsfTwvQ29sbGVjdGlvbkxhYmVsPiA6IG51bGx9XG4gICAgICAgICAgICA8Q2FyZEhlYWRpbmc+e3N1bW1hcnl9PC9DYXJkSGVhZGluZz5cbiAgICAgICAgICA8L0NhcmRCb2R5PlxuICAgICAgICAgIHtpbWFnZSA/IDxDYXJkSW1hZ2VBc3NldCBnZXRBc3NldD17Ym91bmRHZXRBc3NldH0gaW1hZ2U9e2ltYWdlfSAvPiA6IG51bGx9XG4gICAgICAgIDwvR3JpZENhcmRMaW5rPlxuICAgICAgPC9HcmlkQ2FyZD5cbiAgICApO1xuICB9XG59O1xuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUsIG93blByb3BzKSA9PiB7XG4gIGNvbnN0IHsgZW50cnksIGluZmVyZWRGaWVsZHMsIGNvbGxlY3Rpb24gfSA9IG93blByb3BzO1xuICBjb25zdCBsYWJlbCA9IGVudHJ5LmdldCgnbGFiZWwnKTtcbiAgY29uc3QgZW50cnlEYXRhID0gZW50cnkuZ2V0KCdkYXRhJyk7XG4gIGNvbnN0IGRlZmF1bHRUaXRsZSA9IGxhYmVsIHx8IGVudHJ5RGF0YS5nZXQoaW5mZXJlZEZpZWxkcy50aXRsZUZpZWxkKTtcbiAgY29uc3Qgc3VtbWFyeVRlbXBsYXRlID0gY29sbGVjdGlvbi5nZXQoJ3N1bW1hcnknKTtcbiAgY29uc3Qgc3VtbWFyeSA9IHN1bW1hcnlUZW1wbGF0ZVxuICAgID8gc3VtbWFyeUZvcm1hdHRlcihzdW1tYXJ5VGVtcGxhdGUsIGVudHJ5LCBjb2xsZWN0aW9uKVxuICAgIDogZGVmYXVsdFRpdGxlO1xuXG4gIGxldCBpbWFnZSA9IGVudHJ5RGF0YS5nZXQoaW5mZXJlZEZpZWxkcy5pbWFnZUZpZWxkKTtcbiAgaWYgKGltYWdlKSB7XG4gICAgaW1hZ2UgPSBlbmNvZGVVUkkoaW1hZ2UpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzdW1tYXJ5LFxuICAgIHBhdGg6IGAvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uLmdldCgnbmFtZScpfS9lbnRyaWVzLyR7ZW50cnkuZ2V0KCdzbHVnJyl9YCxcbiAgICBpbWFnZSxcbiAgfTtcbn07XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IHtcbiAgYm91bmRHZXRBc3NldDogKGNvbGxlY3Rpb24sIGVudHJ5KSA9PiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiBwYXRoID0+IHtcbiAgICByZXR1cm4gZ2V0QXNzZXQoeyBjb2xsZWN0aW9uLCBlbnRyeSwgcGF0aCB9KShkaXNwYXRjaCwgZ2V0U3RhdGUpO1xuICB9LFxufTtcblxuY29uc3QgbWVyZ2VQcm9wcyA9IChzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykgPT4ge1xuICByZXR1cm4ge1xuICAgIC4uLnN0YXRlUHJvcHMsXG4gICAgLi4uZGlzcGF0Y2hQcm9wcyxcbiAgICAuLi5vd25Qcm9wcyxcbiAgICBib3VuZEdldEFzc2V0OiBkaXNwYXRjaFByb3BzLmJvdW5kR2V0QXNzZXQob3duUHJvcHMuY29sbGVjdGlvbiwgb3duUHJvcHMuZW50cnkpLFxuICB9O1xufTtcblxuY29uc3QgQ29ubmVjdGVkRW50cnlDYXJkID0gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcykoRW50cnlDYXJkKTtcblxuZXhwb3J0IGRlZmF1bHQgQ29ubmVjdGVkRW50cnlDYXJkO1xuIl19 */"));

const CardImageAsset = (_ref) => {
  let {
    getAsset,
    image
  } = _ref;
  return (0, _core.jsx)(_netlifyCmsUiDefault.Asset, {
    path: image,
    getAsset: getAsset,
    component: CardImage
  });
};

const EntryCard = (_ref2) => {
  let {
    path,
    summary,
    image,
    collectionLabel,
    viewStyle = _collectionViews.VIEW_STYLE_LIST,
    boundGetAsset
  } = _ref2;

  if (viewStyle === _collectionViews.VIEW_STYLE_LIST) {
    return (0, _core.jsx)(ListCard, null, (0, _core.jsx)(ListCardLink, {
      to: path
    }, collectionLabel ? (0, _core.jsx)(CollectionLabel, null, collectionLabel) : null, (0, _core.jsx)(ListCardTitle, null, summary)));
  }

  if (viewStyle === _collectionViews.VIEW_STYLE_GRID) {
    return (0, _core.jsx)(GridCard, null, (0, _core.jsx)(GridCardLink, {
      to: path
    }, (0, _core.jsx)(CardBody, {
      hasImage: image
    }, collectionLabel ? (0, _core.jsx)(CollectionLabel, null, collectionLabel) : null, (0, _core.jsx)(CardHeading, null, summary)), image ? (0, _core.jsx)(CardImageAsset, {
      getAsset: boundGetAsset,
      image: image
    }) : null));
  }
};

const mapStateToProps = (state, ownProps) => {
  const {
    entry,
    inferedFields,
    collection
  } = ownProps;
  const label = entry.get('label');
  const entryData = entry.get('data');
  const defaultTitle = label || entryData.get(inferedFields.titleField);
  const summaryTemplate = collection.get('summary');
  const summary = summaryTemplate ? (0, _formatters.summaryFormatter)(summaryTemplate, entry, collection) : defaultTitle;
  let image = entryData.get(inferedFields.imageField);

  if (image) {
    image = encodeURI(image);
  }

  return {
    summary,
    path: "/collections/".concat(collection.get('name'), "/entries/").concat(entry.get('slug')),
    image
  };
};

const mapDispatchToProps = {
  boundGetAsset: (collection, entry) => (dispatch, getState) => path => {
    return (0, _media.getAsset)({
      collection,
      entry,
      path
    })(dispatch, getState);
  }
};

const mergeProps = (stateProps, dispatchProps, ownProps) => {
  return _objectSpread({}, stateProps, {}, dispatchProps, {}, ownProps, {
    boundGetAsset: dispatchProps.boundGetAsset(ownProps.collection, ownProps.entry)
  });
};

const ConnectedEntryCard = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps)(EntryCard);
var _default = ConnectedEntryCard;
exports.default = _default;
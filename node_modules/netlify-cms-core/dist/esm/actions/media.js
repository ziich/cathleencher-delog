"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addAssets = addAssets;
exports.addAsset = addAsset;
exports.removeAsset = removeAsset;
exports.getAsset = getAsset;
exports.REMOVE_ASSET = exports.ADD_ASSET = exports.ADD_ASSETS = void 0;

var _AssetProxy = require("../valueObjects/AssetProxy");

var _netlifyCmsLibUtil = require("netlify-cms-lib-util");

var _entries = require("../reducers/entries");

var _mediaLibrary = require("../reducers/mediaLibrary");

var _mediaLibrary2 = require("./mediaLibrary");

const ADD_ASSETS = 'ADD_ASSETS';
exports.ADD_ASSETS = ADD_ASSETS;
const ADD_ASSET = 'ADD_ASSET';
exports.ADD_ASSET = ADD_ASSET;
const REMOVE_ASSET = 'REMOVE_ASSET';
exports.REMOVE_ASSET = REMOVE_ASSET;

function addAssets(assets) {
  return {
    type: ADD_ASSETS,
    payload: assets
  };
}

function addAsset(assetProxy) {
  return {
    type: ADD_ASSET,
    payload: assetProxy
  };
}

function removeAsset(path) {
  return {
    type: REMOVE_ASSET,
    payload: path
  };
}

function getAsset(_ref) {
  let {
    collection,
    entry,
    path
  } = _ref;
  return async (dispatch, getState) => {
    if (!path) return (0, _AssetProxy.createAssetProxy)({
      path: '',
      file: new File([], 'empty')
    });
    const state = getState();
    const resolvedPath = (0, _entries.selectMediaFilePath)(state.config, collection, entry, path);
    let asset = state.medias.get(resolvedPath);

    if (asset) {
      // There is already an AssetProxy in memory for this path. Use it.
      return asset;
    } // Create a new AssetProxy (for consistency) and return it.


    if ((0, _netlifyCmsLibUtil.isAbsolutePath)(resolvedPath)) {
      // asset path is a public url so we can just use it as is
      asset = (0, _AssetProxy.createAssetProxy)({
        path: resolvedPath,
        url: path
      });
    } else {
      // load asset url from backend
      await (0, _mediaLibrary2.waitForMediaLibraryToLoad)(dispatch, getState());
      const file = (0, _mediaLibrary.selectMediaFileByPath)(state, resolvedPath);

      if (file) {
        const url = await (0, _mediaLibrary2.getMediaDisplayURL)(dispatch, getState(), file);
        asset = (0, _AssetProxy.createAssetProxy)({
          path: resolvedPath,
          url: url || resolvedPath
        });
      } else {
        const {
          url
        } = await (0, _mediaLibrary2.getMediaFile)(state, resolvedPath);
        asset = (0, _AssetProxy.createAssetProxy)({
          path: resolvedPath,
          url
        });
      }
    }

    dispatch(addAsset(asset));
    return asset;
  };
}